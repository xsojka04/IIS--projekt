@using IISprojekt3.Data.IisDbContext;
@using IISprojekt3.Models;
@using IISprojekt3.Models.Enums;
@using IISprojekt3.Helpers;
@inject IisdbContext IisdbContext;

<h3>Vyhledávání testů</h3>

@if (IsLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm class="jumbotron" Model="@SearchFilterModel" OnSubmit="@FilterList">
        <div class="form-row">
            <div class="col">
                <InputText placeholder="Test" class="form-control" @bind-Value="SearchFilterModel.AssignmentName" />
            </div>

            <div class="col">
                <InputText placeholder="Uživatel" class="form-control" @bind-Value="SearchFilterModel.UserName" />
            </div>

            <div class="col text-center">
                <button type="submit" class="btn btn-primary">Vyfiltrovat</button>
            </div>
        </div>
    </EditForm>

    @if (ListError != null)
    {
        <div class="alert alert-danger">@ListError</div>
    }
    @if (ListInfo != null)
    {
        <div class="alert alert-success">@ListInfo</div>
    }

    @if (TestSearchModels.Count() == 0)
    {
        <p>
            <b>Seznam je prázdný</b>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a href="" @onclick="() => OrderByAssignmentName()" @onclick:preventDefault>Zadání </a>
                    </th>
                    <th>
                        <a href="" @onclick="() => OrderByUserName()" @onclick:preventDefault>Uživatel </a>
                    </th>
                    <th>
                        <a href="" @onclick="() => OrderByState()" @onclick:preventDefault>Stav </a>
                    </th>
                    <th>
                        <a href="" @onclick="() => OrderByMaxScore()" @onclick:preventDefault>Maximální počet bodů </a>
                    </th>
                    <th>
                        <a href="" @onclick="() => OrderByScore()" @onclick:preventDefault>Počet bodů </a>
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var searchModel in TestSearchModels)
                {
                    <tr>
                        <td>@searchModel.AssignmentName</td>
                        <td>@searchModel.UserName</td>
                        <td>@searchModel.TestState.ToUserFriendlyString()</td>
                        <td>@searchModel.MaxScore</td>
                        <td>@searchModel.Score</td>
                        <td>
                            @if (searchModel.TestState == ETestState.Vyplneno || searchModel.TestState == ETestState.Ohodnoceno)
                            {
                                <a href=@($"/EvaluateTest?TestId={searchModel.TestId}")>Opravit</a>
                            }
                            <a href="" @onclick="() => DeleteTest(searchModel.TestId)" @onclick:preventDefault> Smazat</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
  public bool IsLoading = true;
  public bool IsOrderByAssignment = true;
  public bool IsOrderByUser { get; set; }
  public bool IsOrderByScore { get; set; }
  public bool IsOrderByMaxScore { get; set; }
  public bool IsOrderByState { get; set; }
  private string ListError { get; set; }
  private string ListInfo { get; set; }
  public SearchFilterModel SearchFilterModel = new SearchFilterModel();
  private List<Test> Tests { get; set; }
  private List<User> Users { get; set; }
  private List<Assignment> Assignments { get; set; }
  public IOrderedEnumerable<TestSearchModel> TestSearchModels { get; set; }

  protected override async Task OnInitializedAsync()
  {
      await Task.Run(() => LoadData());
      await base.OnInitializedAsync();
  }

  private void LoadData()
  {
      var tmpModels = new List<TestSearchModel>();
      Tests = IisdbContext.Test.ToList();
      Users = IisdbContext.User.ToList();
      Assignments = IisdbContext.Assignment.ToList();
      foreach (var test in Tests)
      {
          var assignment = Assignments.FirstOrDefault(x => x.Id == test.IdAssignment);
          var user = Users.FirstOrDefault(x => x.Id == test.Author);
          if (user is null || assignment is null)
              continue;
          tmpModels.Add(new TestSearchModel(test, assignment, user, IisdbContext));
      }

      TestSearchModels = tmpModels.OrderBy(x => x.AssignmentName.ToLower());
      IsLoading = false;
  }

  public void OrderByAssignmentName()
  {
      ListInfo = null;
      ListError = null;

      if (!IsOrderByAssignment)
          TestSearchModels = TestSearchModels.OrderBy(x => x.AssignmentName.ToLower());
      else
          TestSearchModels = TestSearchModels.OrderByDescending(x => x.AssignmentName.ToLower());
      IsOrderByAssignment = !IsOrderByAssignment;
  }

  public void OrderByUserName()
  {
      ListInfo = null;
      ListError = null;

      if (!IsOrderByAssignment)
          TestSearchModels = TestSearchModels.OrderBy(x => x.UserName.ToLower());
      else
          TestSearchModels = TestSearchModels.OrderByDescending(x => x.UserName.ToLower());
      IsOrderByUser = !IsOrderByUser;
  }

  public void OrderByState()
  {
      ListInfo = null;
      ListError = null;

      if (!IsOrderByState)
          TestSearchModels = TestSearchModels.OrderBy(x => x.TestState);
      else
          TestSearchModels = TestSearchModels.OrderByDescending(x => x.TestState);
      IsOrderByState = !IsOrderByState;
  }

  public void OrderByScore()
  {
      ListInfo = null;
      ListError = null;

      if (!IsOrderByScore)
          TestSearchModels = TestSearchModels.OrderBy(x => x.Score);
      else
          TestSearchModels = TestSearchModels.OrderByDescending(x => x.Score);
      IsOrderByScore = !IsOrderByScore;
  }

  public void OrderByMaxScore()
  {
      ListInfo = null;
      ListError = null;
      if (!IsOrderByMaxScore)
          TestSearchModels = TestSearchModels.OrderBy(x => x.MaxScore);
      else
          TestSearchModels = TestSearchModels.OrderByDescending(x => x.MaxScore);
      IsOrderByMaxScore = !IsOrderByMaxScore;
  }

  public void FilterList()
  {
      IsLoading = true;
      var tmpModels = new List<TestSearchModel>();
      foreach (var test in Tests)
      {
          var assignment = Assignments.FirstOrDefault(x => x.Id == test.IdAssignment);
          var user = Users.FirstOrDefault(x => x.Id == test.Author);
          if (user is null || assignment is null)
              continue;
          if (!string.IsNullOrEmpty(SearchFilterModel.UserName))
          {
              if (!user.Name.Contains(SearchFilterModel.UserName))
                  continue;
          }
          if (!string.IsNullOrEmpty(SearchFilterModel.AssignmentName))
          {
              if (!assignment.Name.Contains(SearchFilterModel.AssignmentName))
                  continue;
          }
          tmpModels.Add(new TestSearchModel(test, assignment, user, IisdbContext));
      }

      TestSearchModels = tmpModels.OrderBy(x => x.AssignmentName.ToLower());
      IsLoading = false;
  }

  public void DeleteTest(int testId)
  {
      ListInfo = null;
      ListError = null;

      IsLoading = true;
      var test = IisdbContext.Test.FirstOrDefault(x => x.Id == testId);
      if (test != null)
      {
          ListInfo = $"Test {test.IdAssignmentNavigation.Name} smazán";
          IisdbContext.Remove(test);
          IisdbContext.SaveChanges();
      }
      else
      {
          ListError = "Test se nepodařilo smazat";
      }

      Tests = IisdbContext.Test.ToList();
      Users = IisdbContext.User.ToList();
      Assignments = IisdbContext.Assignment.ToList();
      FilterList();
  }
}
