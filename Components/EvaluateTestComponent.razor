@using IISprojekt3.Models.Enums;
@using IISprojekt3.Models;
@using IISprojekt3.Data.IisDbContext;
@using System.Security.Claims

@inject IJSRuntime JS;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IISprojekt3.Data.IisDbContext.IisdbContext IisdbContext;
@inject NavigationManager NavManager

@if (IsLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="jumbotron">
        <h3>Oprava: @Assignment.Name</h3>
        <p>Autor: @Author.Name</p>
        @if (Error != null)
        {
            <div class="alert alert-danger">@Error</div>
            @(Error = null)
        }
        else if (Info != null)
        {
            <div class="alert alert-success">@Info</div>
        }

        <ul class="list-group">
            @foreach (var answer in AnswerScoreModels)
            {
                <li class="list-group-item @(answer.IsSaved ? "list-group-item-primary" : "list-group-item-warning")">
                    @if (answer.QuestionText != null)
                    {
                        <div class="p-2"><b>Text otázky: </b>@answer.QuestionText</div>
                    }
                    @if (answer.QuistionImage != null)
                    {
                        <img class="p-2" src="@answer.QuistionImage" />
                    }

                    <div class="p-2"><b>Max počet bodů: </b>@answer.MaxScore</div>

                    <div class="p-2">
                        @switch (answer.AnswerType)
                        {
                            case EAnswerType.BoolValue:
                                <b>Odpovězeno:</b> @((bool)answer.Bool ? "Ano" : "Ne")
                                break;
                            case EAnswerType.Number:
                                <b>Odpovězeno:</b> @(answer.Number)
                                break;
                            case EAnswerType.OneWord:
                                <b>Odpovězeno: </b>@(answer.Text)
                                break;
                            case EAnswerType.Text:
                                <b>Odpovězeno: </b>@(answer.Text)
                                break;
                        }
                    </div>
                    <div class="bg-light m-2 p-2 rounded">
                        <EditForm class="form-group" Model="@answer" OnSubmit="() => SaveScore(answer)">
                            <div>
                                <h4>Hodnocení:</h4>
                                <label>Body</label>
                                <InputNumber class="form-control" min="0" max="@answer.MaxScore" @bind-Value="answer.Score" />
                                <label>Popisek</label>
                                <InputText class="form-control" @bind-Value="answer.EvaluationText" />
                            </div>

                            <div class="p-2">
                                <button class="btn btn-primary" type="submit">Uložit Hodnocení</button>
                            </div>
                        </EditForm>
                    </div>
                </li>
            }
        </ul>

        <div>
            <EditForm class="form-group p-2" Model="@evaluateTestModel" OnSubmit="() => SaveAll()">

                <div>
                    <label>Bodové ohodnocení: <b>@(AnswerScoreModels.Sum(x => x.Score))/@(QuestionGroups.Sum(x => x.Score*x.Amount))</b></label>
                </div>
                <label>Známka</label>
                <InputText class="form-control" @bind-Value="evaluateTestModel.Evaluation" /><br>
                <label>Text k hodnocení</label>
                <InputText class="form-control" @bind-Value="evaluateTestModel.EvaluationText" />

                <div class="p-2">
                    <button class="btn btn-primary" type="submit">Uložit kompletní hodnocení</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code
{
    [Parameter]
    public int TestId { get; set; }
    public int UserId { get; set; }
    public Test Test { get; set; }
    public User Author { get; set; }
    public Assignment Assignment { get; set; }
    public List<QuestionGroup> QuestionGroups { get; set; }
    public List<Question> Questions { get; set; }
    public List<AnswerScoreModel> AnswerScoreModels { get; set; }
    private string Error { get; set; }
    private string Info { get; set; }
    private EvaluateTestModel evaluateTestModel = new EvaluateTestModel();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        UserId = await GetUserId();
        await Task.Run(() => LoadData());
        await base.OnInitializedAsync();
    }

    public void LoadData()
    {
        Test = IisdbContext.Test.FirstOrDefault(x => x.Id == TestId);
        Author = IisdbContext.User.FirstOrDefault(x => x.Id == Test.Author);
        Assignment = IisdbContext.Assignment.FirstOrDefault(x => x.Id == Test.IdAssignment);
        QuestionGroups = IisdbContext.QuestionGroup.Where(x => x.IdAssingment == Test.IdAssignment).ToList();
        var answers = IisdbContext.Answer.Where(x => x.IdTest == TestId).ToList();
        Questions = new List<Question>();
        foreach (var answer in answers)
        {
            Questions.Add(IisdbContext.Question.FirstOrDefault(x => x.Id == answer.IdQuestion));
        }
        AnswerScoreModels = answers.Select(x => new AnswerScoreModel(x, GetScore(x))).ToList();

        evaluateTestModel.Evaluation = Test.Evaluation;
        evaluateTestModel.EvaluationText = Test.EvaluationText;
        IsLoading = false;
    }

    public float GetScore(Answer answer)
    {
        return QuestionGroups.FirstOrDefault(x => x.Id == Questions.FirstOrDefault(x => x.Id == answer.IdQuestion).IdQuestionGroup).Score;
    }

    public void SaveScore(AnswerScoreModel answerScoreModel)
    {
        if (answerScoreModel.Score is null)
        {
            Error = "Otázce chybý skóre";
            ScrollToTopAsync();
        }
        else
        {
            Error = null;

            var answer = IisdbContext.Answer.FirstOrDefault(x => x.Id == answerScoreModel.Id);
            answerScoreModel.UpdateAnswer(answer);
            answer.EvaluatedBy = UserId;
            IisdbContext.Answer.Update(answer);
            IisdbContext.SaveChanges();
            answerScoreModel.SetIsSaved(true);
        }
    }

    public void SaveAll()
    {
        if (AnswerScoreModels.Any(x => x.IsSaved == false))
        {
            Error = "Některá komponenta není uložena";
            ScrollToTopAsync();
        }
        else
        {
            if (evaluateTestModel.Evaluation is null || evaluateTestModel.Evaluation == "")
            {
                Error = "Není vypsána známka k testu";
                ScrollToTopAsync();
            }
            else
            {
                Error = null;
                float? score = 0;
                foreach (var answer in AnswerScoreModels)
                {
                    score += answer.Score;
                }

                Test.Score = score;
                Test.Evaluation = evaluateTestModel.Evaluation;
                Test.EvaluatedBy = UserId;
                Test.EvaluationText = evaluateTestModel.EvaluationText;
                Test.State = (int)ETestState.Ohodnoceno;
                IisdbContext.SaveChanges();

                evaluateTestModel = new EvaluateTestModel();
                NavManager.NavigateTo("/", true);
            }
        }
    }

    private async Task<int> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            return int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        }
        throw new Exception("Uživatel není přihlášený");
    }

    private void ScrollToTopAsync()
    {
        JS.InvokeVoidAsync("window.scrollTo", 0, 0).ConfigureAwait(false);
    }
}