@using Microsoft.Extensions.Logging;
@using IISprojekt3.Pages;
@using IISprojekt3.Models;
@using IISprojekt3.Helpers;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IISprojekt3.Data.IisDbContext.IisdbContext IisdbContext


@inject ILogger<AccountModel> _logger

<EditForm class="col-md-4 jumbotron" Model="@changePasswordModel" OnSubmit="@ChangePassword">
    <h4>Změna hesla</h4>
    @if (Error != null)
    {
        <div class="alert alert-danger">@Error</div>
    }
    else if (Info != null)
    {
        <div class="alert alert-success">@Info</div>
    }
    <div class="form-group">
        <label>Nové heslo</label>
        <InputText type="password" class="form-control" @bind-Value="changePasswordModel.NewPassword" />
    </div>

    <div class="form-group">
        <label>Potvrzení nového hesla</label>
        <InputText type="password" class="form-control" @bind-Value="changePasswordModel.NewPasswordConfirm" />
    </div>

    <button type="submit" class="btn btn-primary">Změnit</button>
</EditForm>



@code {
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();
    private string Error { get; set; }
    private string Info { get; set; }

    private void ChangePassword()
    {
        Error = changePasswordModel.GetValidationError();
        if (Error != null)
            return;

        if (!IsChangePassword())
            return;

        _logger.LogInformation("Updatovane heslo");
        Info = "Heslo bylo aktualizováno";
        changePasswordModel.NewPassword = null;
        changePasswordModel.NewPasswordConfirm = null;
    }

    private bool IsChangePassword()
    {
        var userId = GetUserId().ConfigureAwait(false).GetAwaiter().GetResult();
        if (userId is null)
        {
            Error = "Heslo se nepodařilo změnit";
            return false;
        }
        var user = IisdbContext.User.FirstOrDefault(x => x.Id == userId);
        if (user is null)
        {
            Error = "Nepodařilo se dohledat uživatele";
            return false;
        }
        user.Password = UserManager.HashPassword(changePasswordModel.NewPassword);
        IisdbContext.SaveChanges();
        return true;
    }

    private async Task<int?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            return int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        }
        return null;
    }
}
